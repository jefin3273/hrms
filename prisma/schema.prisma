// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Add this model to your schema.prisma file

model User {
  id            String         @id
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  attendance    Attendance[]
  claims        Claim[]
  leaveRequests LeaveRequest[]
  leaveBalances LeaveBalance[]
  companyUsers  CompanyUser[]
  subscriptions Subscription[]
  meetings      Meeting[]
  grievances    Grievance[]
  trainings     Training[]

  @@map("users")
}

model Claim {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  amount      Decimal   @db.Decimal(10, 2)
  description String
  claimType   String    @map("claim_type")
  status      String    @default("PENDING")
  submittedAt DateTime  @default(now()) @map("submitted_at")
  approvedAt  DateTime? @map("approved_at")
  approvedBy  String?   @map("approved_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  User        User      @relation(fields: [userId], references: [id])
}

model ClaimType {
  id          String   @id @default(uuid())
  name        String
  description String?
  maxAmount   Decimal? @map("max_amount") @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")
}

model Company {
  id              String        @id @default(uuid())
  code            String        @unique
  name            String
  address         String?
  address1        String?
  address2        String?
  city            String?
  state           String?
  postalCode      String?       @map("postal_code")
  logoUrl         String?       @map("logo_url")
  infoUpdated     Boolean       @default(false) @map("info_updated")
  notifications   Json          @default("{}") @db.JsonB
  dailyRate       String        @default("calendar") @map("daily_rate")
  epf             Json          @default("{}") @db.JsonB
  esi             Json          @default("{}") @db.JsonB
  professionalTax Json          @default("{}") @map("professional_tax") @db.JsonB
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @map("updated_at")
  companyUsers    CompanyUser[]
}

model CompanyUser {
  id        String   @id @default(uuid())
  companyId String   @map("company_id")
  userId    String   @map("user_id")
  role      String
  createdAt DateTime @default(now()) @map("created_at")
  company   Company  @relation(fields: [companyId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([companyId, userId])
}

model LeaveType {
  id            String         @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime       @default(now()) @map("created_at")
  leaveRequests LeaveRequest[]
  leaveBalances LeaveBalance[]
}

model LeaveRequest {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  leaveTypeId String    @map("leave_type_id")
  startDate   DateTime  @map("start_date") @db.Date
  endDate     DateTime  @map("end_date") @db.Date
  status      String    @default("pending")
  reason      String?
  department  String?
  createdAt   DateTime  @default(now()) @map("created_at")
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
}

model LeaveBalance {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  leaveTypeId String    @map("leave_type_id")
  year        Int
  totalDays   Int       @map("total_days")
  usedDays    Int       @default(0) @map("used_days")
  createdAt   DateTime  @default(now()) @map("created_at")
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@unique([userId, leaveTypeId, year])
}

model Department {
  id        String    @id @default(uuid())
  code      String    @unique
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  sections  Section[]
}

model Designation {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")
}

model Section {
  id           String     @id @default(uuid())
  code         String     @unique
  name         String
  departmentId String     @map("department_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  department   Department @relation(fields: [departmentId], references: [id])
}

model Category {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")
}

model ExtraClassification {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")
}

model PaySchedule {
  id                     String   @id @default(uuid())
  code                   String   @unique
  name                   String
  isPublicHolidayWorking Boolean  @default(false) @map("is_public_holiday_working")
  holidayGroup           String   @map("holiday_group")
  workingDays            Decimal  @map("working_days") @db.Decimal(3, 1)
  weekSchedule           Json     @map("week_schedule") @db.JsonB
  payCycleStart          Int      @map("pay_cycle_start")
  payCycleEnd            Int      @map("pay_cycle_end")
  createdBy              String   @map("created_by")
  createdAt              DateTime @default(now()) @map("created_at")
}

model Subscription {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  tmsExpiry       DateTime? @map("tms_expiry")
  payExpiry       DateTime? @map("pay_expiry")
  leaveExpiry     DateTime? @map("leave_expiry")
  claimExpiry     DateTime? @map("claim_expiry")
  hrExpiry        DateTime? @map("hr_expiry")
  appraisalExpiry DateTime? @map("appraisal_expiry")
  createdAt       DateTime  @default(now()) @map("created_at")
  User            User      @relation(fields: [userId], references: [id])
}

model Attendance {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  date      DateTime  @db.Date
  shift     String
  clockIn   DateTime? @map("clock_in")
  clockOut  DateTime? @map("clock_out")
  status    String?
  createdAt DateTime  @default(now()) @map("created_at")
  User      User      @relation(fields: [userId], references: [id])
}

model Meeting {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  description String?
  date        DateTime
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  type        String // "meeting" or "training"
  createdAt   DateTime @default(now()) @map("created_at")
  User        User     @relation(fields: [userId], references: [id])
}

model Grievance {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  title       String
  description String
  status      String    @default("pending")
  priority    String
  submittedAt DateTime  @default(now()) @map("submitted_at")
  resolvedAt  DateTime? @map("resolved_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  User        User      @relation(fields: [userId], references: [id])
}

model Training {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  title       String
  description String?
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  status      String    @default("pending")
  certificate String?
  expiryDate  DateTime? @map("expiry_date")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  User        User      @relation(fields: [userId], references: [id])
}
